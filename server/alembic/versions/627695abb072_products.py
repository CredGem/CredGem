"""products

Revision ID: 627695abb072
Revises: init_schema
Create Date: 2025-01-06 11:18:12.943949

"""
from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "627695abb072"
down_revision: Union[str, None] = "init_schema"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP TYPE IF EXISTS productstatus")
    op.execute("DROP TYPE IF EXISTS applicationstatus") 
    op.execute("DROP TYPE IF EXISTS applicationhistorystatus")
    op.execute("DROP TYPE IF EXISTS applicationtype")
    op.execute("DROP TYPE IF EXISTS applicationmode")

    op.create_table(
        "products",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("ACTIVE", "INACTIVE", name="productstatus"),
            nullable=False,
        ),
        sa.Column("active_version_id", sa.String(), nullable=True),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name", name="uq_product_name"),
    )
    op.create_table(
        "product_versions",
        sa.Column("product_id", sa.String(), nullable=False),
        sa.Column("version", sa.String(), nullable=False),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["products.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("product_id", "version", name="uq_product_version"),
    )
    op.create_table(
        "product_applications",
        sa.Column("product_id", sa.String(), nullable=False),
        sa.Column("product_version_id", sa.String(), nullable=False),
        sa.Column(
            "application_type",
            sa.Enum("ONE_TIME", "RECURRING", name="applicationtype"),
            nullable=False,
        ),
        sa.Column(
            "application_mode",
            sa.Enum("ADD", "RESET", name="applicationmode"),
            nullable=False,
        ),
        sa.Column("wallet_id", sa.String(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("ACTIVE", "INACTIVE", name="applicationstatus"),
            nullable=False,
        ),
        sa.Column("context", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["products.id"],
        ),
        sa.ForeignKeyConstraint(
            ["product_version_id"],
            ["product_versions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["wallet_id"],
            ["wallets.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "product_version_credit_settings",
        sa.Column("product_id", sa.String(), nullable=False),
        sa.Column("product_version_id", sa.String(), nullable=False),
        sa.Column("credit_type_id", sa.String(), nullable=False),
        sa.Column("credit_amount", sa.Float(), nullable=False),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["credit_type_id"],
            ["credit_types.id"],
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["products.id"],
        ),
        sa.ForeignKeyConstraint(
            ["product_version_id"],
            ["product_versions.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "product_version_id",
            "credit_type_id",
            name="uq_product_version_credit_type",
        ),
    )
    op.create_table(
        "application_history",
        sa.Column("application_id", sa.String(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "PENDING",
                "IN_PROGRESS",
                "COMPLETED",
                "FAILED",
                name="applicationhistorystatus",
            ),
            nullable=False,
        ),
        sa.Column("details", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["application_id"],
            ["product_applications.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # First drop all tables
    op.drop_table("application_history")
    op.drop_table("product_version_credit_settings")
    op.drop_table("product_applications")
    op.drop_table("product_versions")
    op.drop_table("products")
    
    # Then drop the ENUM types after their dependent tables are gone
    op.execute("DROP TYPE IF EXISTS productstatus")
    op.execute("DROP TYPE IF EXISTS applicationstatus") 
    op.execute("DROP TYPE IF EXISTS applicationhistorystatus")
    op.execute("DROP TYPE IF EXISTS applicationtype")
    op.execute("DROP TYPE IF EXISTS applicationmode")
    # ### end Alembic commands ###
